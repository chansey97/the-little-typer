#lang pie-a-let-mode

;; decidable
(claim Dec
  (-> U U))
(define Dec
  (lambda (X)
    (Either X (-> X Absurd))))

;; +
(claim step-+
  (-> Nat Nat))
(define step-+
  (lambda (+_n-1)
    (add1 +_n-1)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; =consequence
(claim =consequence
  (-> Nat Nat
      U))
(define =consequence
  (lambda (n j)
    (which-Nat n
      (which-Nat j
        Trivial
        (lambda (j-1)
          Absurd))
      (lambda (n-1)
        (which-Nat j
          Absurd
          (lambda (j-1)
            (= Nat n-1 j-1)))))))

;; =consequence-same
(claim =consequence-same
  (Pi ((n Nat))
    (=consequence n n)))
(define =consequence-same
  (lambda (n)
    (ind-Nat n
      (lambda (k)
        (=consequence k k))
      sole
      (lambda (n-1 =consequence_n-1)
        (same n-1)))))

;; use-Nat=
(claim use-Nat=
  (Pi ((n Nat)
       (j Nat))
    (-> (= Nat n j)
        (=consequence n j))))
(define use-Nat=
  (lambda (n j)
    (lambda (n=j)
      (replace n=j
        (lambda (k)
          (=consequence n k))
        (=consequence-same n)))))

;; add1-not-zero
(claim add1-not-zero
  (Pi ((n Nat))
    (-> (= Nat (add1 n) zero)
        Absurd)))
(define add1-not-zero
  (lambda (n)
    (use-Nat= (add1 n) zero)))

;; sub1=
(claim sub1=
  (Pi ((n Nat)
       (j Nat))
    (-> (= Nat (add1 n) (add1 j))
        (= Nat n j))))
(define sub1=
  (lambda (n j)
    (use-Nat= (add1 n) (add1 j))))

;; ---- start to define <= ----

;; <=
(claim <=
  (-> Nat Nat U))
(define <=
  (lambda (x y)
    (Sigma ((z Nat))
      (= Nat (+ x z) y))))

;; add1-not-<=zero
(claim add1-not-<=zero
  (Pi ((n Nat))
    (-> (<= (add1 n) zero)
        Absurd)))
(define add1-not-<=zero
  (lambda (n)
    (lambda (add1<=zero)
      (let ((z (car add1<=zero))
            (add1+z=zero (cdr add1<=zero)))
        (add1-not-zero (+ n z) add1+z=zero)))))
;; add1<=zero : (<= (add1 n) zero) = (Sigma ((z Nat)) (= Nat (+ (add1 n) z) zero))
;; z : Nat
;; add1+z=zero : (= Nat (+ (add1 n) z) zero) 希望beta=> (= Nat (add1 (+ n z)) zero)
;; 因为只有把 (+ (add1 n) z)变成(add1 (+ n z)) 才能把(+ n z)看成整体，然后用 add1-not-zero

;; sub<=
(claim sub1<=
  (Pi ((n Nat)
       (j Nat))
    (-> (<= (add1 n) (add1 j))
        (<= n j))))
(define sub1<=
  (lambda (n j)
    (lambda (add1n<=add1j)
      (let ((z (car add1n<=add1j))
            (add1n+z=add1j (cdr add1n<=add1j)))
        (cons z ((sub1= (+ n z) j) add1n+z=add1j) ))))) ; prove (+ n z) = j
;; z : Nat
;; add1n+z=add1j : (= Nat (+ (add1 n) z) (add1 j)) 希望 (+ (add1 n) z) beta=> (add1 (+ n z))
;; 因为只有把 (+ (add1 n) z)变成(add1 (+ n z)) 才能把(+ n z)看成整体，然后用 sub1=

;; dec-add1<=
(claim dec-add1<=
  (Pi ((n-1 Nat)
       (j-1 Nat))
    (-> (Dec (<= n-1 j-1))
        (Dec (<= (add1 n-1) (add1 j-1))))))
(define dec-add1<=
  (lambda (n-1 j-1 <=-or-not)
    (ind-Either <=-or-not
      (lambda (target)
        (Dec (<= (add1 n-1) (add1 j-1))))
      (lambda (yes)
        (left (cons (car yes) (cong (cdr yes) (+ 1)))))
      (lambda (no) ; from (n-1<=j-1 -> absurd) to prove (n<=j -> absurd)
        (right
         (lambda (n<=j) ; now we have n<=j, if we can deduce n-1<=j-1 from n<=j, then apply no, we get absurd, so so extract a lemma sub1<=
           (no (sub1<= n-1 j-1 n<=j))))))))

(claim <=?
  (Pi ((n Nat)
       (m Nat))
    (Dec (<= n m))))
(define <=?
  (lambda (n)
    (ind-Nat n
      (lambda (k)
        (Pi ((m Nat))
          (Dec (<= k m))))
      (lambda (j)
        (left (cons j (same j))))
      (lambda (n-1 <=?-of-n-1)
        (lambda (j)
          (ind-Nat j
            (lambda (k)
              (Dec (<= (add1 n-1) k))) ; note: the last argument is k not j
            (right (lambda (x) ; x is absurd indeed, so extract a lemma add1-not-<=zero to prove absurd
                     (add1-not-<=zero n-1 x)))
            (lambda (j-1 <=-of-j-1)
              (dec-add1<= n-1 j-1 (<=?-of-n-1 j-1))))))))) ; given (<=?-of-n-1 j-1) : (Dec (<= Nat n-1 j-1))，we want (Dec (<= Nat (add1 n-1) (add1 j-1)))so abstract lemma dec-add1<=

;; (<= 1 2)
;; (<= 2 2)
;; (<= 3 2)

;; (<=? 1 2)
;; (<=? 2 2)
;; (<=? 3 2)

;; Here are just some of my own experiences:
;; 1. Variable naming is very important (e.g: correspondence of j and j-1), because type expressions will contain these names in the tooltips.
;; 2. Lexical scoping can simplify the program, otherwise, arguments need to be passed manually.
;; 3. There may be several versions of lemmas for the same concept (e.g: add1-not-zero vs zero-not-add1). Need to be very careful.
;; 4. Let binding is very useful, so use #lang pie-a-let-mode (e.g: we can take out car and cdr from Sigma first)
;; 5. Write a simple version first, then refine the type.
;; 6. Need to be patient, especially in the absence of type expression stepper. 
