#lang pie

;; +
(claim step-+
  (-> Nat Nat))
(define step-+
  (lambda (+_n-1) (add1 +_n-1)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; *
(claim step-*
  (-> Nat Nat Nat
      Nat))
(define step-*
  (lambda (j n-l *_n-1)
     (+ j *_n-1)))

(claim *
  (-> Nat Nat Nat))
(define *
  (lambda (n j)
    (rec-Nat n
      0
      (step-* j))))

;; factorial
(claim step-factorial
  (-> Nat Nat
      Nat))
(define step-factorial
  (lambda (n-1 almost)
    (* (add1 n-1) almost)))

(claim factorial
  (-> Nat 
    Nat))
(define factorial
  (lambda (n )
    (rec-Nat n
      1
      step-factorial)))

;; In mathematics, the factorial of a positive integer n.
;; In order for the recurrence relation to be extended to n = 0, it is necessary to define 0! = 1
