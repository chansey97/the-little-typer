;; Use a more specific type is called an intrinsic proof
#lang pie

;; length
(claim step-length
  (Pi ((E U))
    (-> E (List E) Nat
        Nat)))
(define step-length
  (lambda (E)
    (lambda (e es length_es)
      (add1 length_es))))

(claim length
  (Pi ((E U))
    (-> (List E) Nat)))
(define length
  (lambda (E )
    (lambda (es )
      (rec-List es
        0
        (step-length E)))))

;; list->vec
(claim mot-list->vec
  (Pi ((E U))
    (-> (List E) U)))
(define mot-list->vec
  (lambda (E)
    (lambda (es)
      (Vec E (length E es)))))

(claim step-list->vec
  (Pi ((E U)
       (e E)
       (es (List E)))
    (-> (mot-list->vec E es)
        (mot-list->vec E (:: e es)))))
(define step-list->vec
  (lambda (E e es)
    (lambda (list->vec_es)
      (vec:: e list->vec_es))))

(claim list->vec
  (Pi ((E U)
       (es (List E)))
    (Vec E (length E es))))
(define list->vec
  (lambda (E es)
    (ind-List es
      (mot-list->vec E)
      vecnil
      (step-list->vec E))))

