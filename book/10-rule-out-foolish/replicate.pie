#lang pie

;; replicate
(claim mot-replicate
  (-> U Nat
    U))
(define mot-replicate
  (lambda (E k)
    (Vec E k)))

(claim step-replicate
  (Pi ((E U)
       (e E)
       (l-1 Nat))
    (-> (mot-replicate E l-1)
      (mot-replicate E (add1 l-1)))))
(define step-replicate
  (lambda (E e l-1)
    (lambda (step-replicate_l-1)
      (vec:: e step-replicate_l-1))))

(claim replicate
  (Pi ((E U)
       (l Nat))
    (-> E (Vec E l))))
(define replicate
  (lambda (E l)
    (lambda (e)
      (ind-Nat l
        (mot-replicate E)
        vecnil
        (step-replicate E e)))))
