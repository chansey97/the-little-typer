#lang pie

;; +
(claim step-+
  (-> Nat Nat))
(define step-+
  (lambda (+_n-1) (add1 +_n-1)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; vec-append
(claim mot-vec-append
  (Pi ((E U)
       (j Nat)
       (k Nat))
    (-> (Vec E k) U)))
(define mot-vec-append
  (lambda (E j k)
    (lambda (es)
      (Vec E (+ k j)))))

(claim step-vec-append
  (Pi ((E U)
       (j Nat)
       (k Nat)
       (e E)
       (es (Vec E k)))
    (-> (mot-vec-append E j k es)
        (mot-vec-append E j (add1 k) (vec:: e es)))))
(define step-vec-append
  (lambda (E j l-1 e es)
    (lambda (vec-append_es)
      (vec:: e vec-append_es))))

(claim vec-append
  (Pi ((E U)
       (l Nat)
       (j Nat))
    (-> (Vec E l) (Vec E j)
        (Vec E (+ l j)))))
(define vec-append
  (lambda (E l j)
    (lambda (es end)
      (ind-Vec l es
               (mot-vec-append E j)
               end
               (step-vec-append E j)))))

;; (claim treats
;;   (Vec Atom 3))
;; (define treats
;;   (vec:: 'kanelbullar
;;     (vec:: 'plattar
;;       (vec:: 'prinsesstarta vecnil))))

;; (claim drinks
;;   (List Atom))
;; (define drinks
;;   (:: 'coffee
;;     (:: 'cocoa nil)))

;; (claim fika
;;   (Vec Atom 5))
;; (define fika
;;   (vec-append Atom 3 2
;;               treats
;;               (list->vec Atom drinks)))
