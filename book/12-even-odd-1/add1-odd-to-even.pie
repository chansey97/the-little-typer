#lang pie

;; double
(claim double
  (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat n
      0
      (lambda (so-far) (add1 (add1 so-far))))))

;; Even
(claim Even
  (-> Nat U))
(define Even
  (lambda (n)
    (Sigma ((half Nat))
      (= Nat n (double half)))))

;; Odd
(claim Odd
  (-> Nat U))
(define Odd
  (lambda (n)
    (Sigma ((haf Nat))
      (= Nat n (add1 (double haf))))))

;; +
(claim step-+
  (-> Nat Nat))
(define step-+
  (lambda (+_n-1)
    (add1 +_n-1)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; add1-odd->even
(claim add1-odd->even
  (Pi ((n Nat))
    (-> (Odd n) (Even (add1 n)))))
(define add1-odd->even
  (lambda (n o_n)
    (cons (add1 (car o_n))
      (cong (cdr o_n) (+ 1)))))


