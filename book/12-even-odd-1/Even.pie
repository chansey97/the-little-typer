#lang pie

;; double
(claim double
  (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat n
      0
      (lambda (so-far) (add1 (add1 so-far))))))

;; Even
(claim Even
  (-> Nat U))
(define Even
  (lambda (n)
    (Sigma ((half Nat))
      (= Nat n (double half)))))

;; zero-is-even
(claim zero-is-even
  (Even 0))
(define zero-is-even
  (cons 0 (same 0)))

;; +two-even
(claim +two-even
  (Pi ((n Nat))
    (-> (Even n)
        (Even (+ 2 n)))))
(define +two-even
  (lambda (n e_n)
    (cons (add1 (car e_n))
      (cong (cdr e_n) (+2)) )))

