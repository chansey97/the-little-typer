#lang pie

;; double
(claim double
  (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat n
      0
      (lambda (so-far) (add1 (add1 so-far))))))

;; Even
(claim Even
  (-> Nat U))
(define Even
  (lambda (n)
    (Sigma ((half Nat))
      (= Nat n (double half)))))

;; zero-is-even
(claim zero-is-even
  (Even 0))
(define zero-is-even
  (cons 0 (same 0)))

;; Odd
(claim Odd
  (-> Nat U))
(define Odd
  (lambda (n)
    (Sigma ((haf Nat))
      (= Nat n (add1 (double haf))))))

;; +
(claim step-+
  (-> Nat Nat))
(define step-+
  (lambda (+_n-1)
    (add1 +_n-1)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; add1-even->odd
(claim add1-even->odd
  (Pi ((n Nat))
    (-> (Even n)
        (Odd (add1 n)))))
(define add1-even->odd
  (lambda (n e_n)
    (cons (car e_n) (cong (cdr e_n) (+ 1)))))

;; add1-odd->even
(claim add1-odd->even
  (Pi ((n Nat))
    (-> (Odd n) (Even (add1 n)))))
(define add1-odd->even
  (lambda (n o_n)
    (cons (add1 (car o_n))
      (cong (cdr o_n) (+ 1)))))

;; even-or-odd
(claim mot-even-or-odd
  (-> Nat U))
(define mot-even-or-odd
  (lambda (k)
    (Either (Even k) (Odd k))))

(claim step-even-or-odd
  (Pi ((n-1 Nat))
    (-> (mot-even-or-odd n-1)
        (mot-even-or-odd (add1 n-1)))))
(define step-even-or-odd
  (lambda (n-1)
    (lambda (e-or-o_n-1)
      (ind-Either e-or-o_n-1
        (lambda (e-or-o_n-1)
          (mot-even-or-odd (add1 n-1)))
        (lambda (e_n-1)
          (right (add1-even->odd n-1 e_n-1)))
        (lambda (o_n-1)
          (left (add1-odd->even n-1 o_n-1)))))))

(claim even-or-odd
  (Pi ((n Nat))
    (Either (Even n) (Odd n))))
(define even-or-odd
  (lambda (n)
    (ind-Nat n
      mot-even-or-odd
      (left zero-is-even)
      step-even-or-odd)))

;; 在实现step-even-or-odd的过程中：
;; 已知 n-1 : Nat 和 e-or-o_n-1 : (mot-even-or-odd n-1)，现在需要获得一个proof? : (mot-even-or-odd (add1 n-1))
;; 我们ind-Either在e-or-o_n-1上，并提供motive:
;; (lambda (e-or-o_n-1)
;;   (mot-even-or-odd (add1 n-1)))

;; 注意：这个motive的参数e-or-o__n-1也是一个(mot-even-or-odd n-1)的证明，但是所要求证的U却没有依赖于这个证明，即：
;; (mot-even-or-odd (add1 n-1)) 不依赖于 e-or-o__n-1
;; 但实际上ind-Either的 mot : (-> (Either L R) U)，这个U可以是任意的命题，并且该命题可以依赖于(Either L R)的证明

;; 这很像appendis-ind-=/incr=add1.pie，在那里我们使用ind-=去实现step-incr=add1，但忽略ignore参数
;; 因此，even-or-odd这个例子其实并没有完全体现ind-Either的力量
