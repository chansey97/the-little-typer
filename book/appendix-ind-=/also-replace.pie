;; ind-= is a general form of replace

#lang pie

;; define replace using ind-=
(claim also-replace
  (Pi ((X U)
       (from X)
       (to X)
       (target (= X from to))
       (mot (-> X U))
       (base (mot from)))
    (mot to)))
(define also-replace
  (lambda (X from to)
    (lambda (target mot base)
      (ind-= target
        (lambda (x ignore)
          (mot x))
        base))))

;; --- testing ---

;; +
(claim step-+
  (-> Nat Nat))
(define step-+
  (lambda (+_n-1)
    (add1 +_n-1)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; incr
(claim incr
  (-> Nat 
      Nat))
(define incr
  (lambda (n)
    (iter-Nat n
      1
      (+ 1))))

;; incr=add1
(claim mot-incr=add1
  (-> Nat 
      U))
(define mot-incr=add1
  (lambda (k)
    (= Nat (incr k) (add1 k))))

(claim step-incr=add1
  (Pi ((n-1 Nat))
    (-> (= Nat
          (incr n-1) ; from
          (add1 n-1)) ; to
        (= Nat
          (add1 (incr n-1))
          (add1 (add1 n-1))))))
(define step-incr=add1
  (lambda (n-1)
    (lambda (incr=add1_n-1)
      (also-replace Nat (incr n-1) (add1 n-1)
                    incr=add1_n-1
                    (lambda (k)
                      (= Nat
                        (add1 (incr n-1))
                        (add1 k)))
                    (same (add1 (incr n-1)))))))

(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))
(define incr=add1
  (lambda (n)
    (ind-Nat n
      mot-incr=add1
      (same (add1 zero))
      step-incr=add1)))


