#lang pie

;; +
(claim step-+
  (-> Nat Nat))
(define step-+
  (lambda (+_n-1)
    (add1 +_n-1)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

;; double
(claim double
  (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat n
      0
      (+ 2))))

;; double-Vec
(claim base-double-Vec
  (Pi ((E U))
    (-> (Vec E zero) (Vec E (double zero)))))
(define base-double-Vec
  (lambda (E)
    (lambda (es)
      vecnil)))

(claim mot-double-Vec
  (-> U Nat
      U))
(define mot-double-Vec
  (lambda (E k)
    (-> (Vec E k) (Vec E (double k)))))

(claim step-double-Vec
  (Pi ((E U)
       (l-1 Nat))
    (-> (-> (Vec E l-1)
            (Vec E (double l-1)))
        (-> (Vec E (add1 l-1))
            (Vec E (double (add1 l-1)))))))
(define step-double-Vec
  (lambda (E l-1)
    (lambda (double-Vec_l-1)
      (lambda (es)
        (vec:: (head es)
          (vec:: (head es)
            (double-Vec_l-1
             (tail es))))))))

(claim double-Vec
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l) (Vec E (double l)))))
(define double-Vec
  (lambda (E l)
    (ind-Nat l
      (mot-double-Vec E)
      (base-double-Vec E)
      (step-double-Vec E))))

